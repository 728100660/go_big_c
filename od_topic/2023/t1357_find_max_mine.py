"""
寻找最大价值矿堆
题目描述
给你一个由'0'(空地)、'1'(银矿)、'2'金矿)组成的的地图，矿堆只能由上下左右相邻的金矿或银矿连接形成。超出地图范围可以认为是空地。

假设银矿价值1，金矿价值2 ，请你找出地图中最大价值的矿堆并输出该矿堆的价值.

输入描述
地图元素信息如:

22220
00000
00000
11111
地图范围最大 300∗300
0≤地图元素≤2
输出描述
矿堆的最大价值

样例
输入

22220
00000
00000
01111
输出

8
说明

无

输入

22220
00020
00010
01111
输出

15
说明

无

输入

20000
00020
00000
00111
break
输出

3
说明

无

102210100111010001001002122000111101
002022221012010012211101200001021000
112012222210102020102121121022222201
211022001221121022021211021222012121
202111121001112220202202221011020101
001222202110002111201212001202012212
202001010010221200012110221201222011
120110021011112110100221121020010211
110210010222022221221221001022221012
100112100010211121211002102210012112
100222112212112212200211022210200211
122220000011112101221200011221022021
102110122001012122100102220110012010
201120022020010220012211110111222200
122222022012200210020210220200000121
210121121120000122110221002112011201
021112210001201220002100222000020011
200112102121020102122210022211002022
101212021220122002110111102001000101
002101022000002211220022110120102201
212012222000000102202011212112211112
022001111210211002110202002201022110
010222021202221111102221221212101201
210210011020200202022001212021002011
111221100220102200002211102020120200
201220200121101210012200012212012100
112210101102020121210022121212010020
111111121200222210110102000110001122
111001010120020112222221011010020201
211221002010002100002120201222121200
011000210221021222022110001210000112
112200211010021022202220111022001000
021201222110121201222000222102001212
112202111010121120202111110220010122
021211100220201112111112211020111020
120111202120200212122112122220220111
221020112101220210021100021102110001
112100220212022001121202221101012220
011001120102112021100022112201210221
011112021122202021201211011210022002
112120122002220111122211110011222212
111101121202000201010112222120021011
001210220000220211200220111020112022
200210202201102220022210220201112022
010111221100202100110101010000102010
222002011101122102001102010200220000
121121222111202111022102220111012222
110010121211000122210210102010000021
010201021200012001101212210012122001
221121111220020112120112211001211211
011200102012110120010021120202112221
010111102212120001100222222001022001
002200012220120012211121011120122000
201001102010221101211111012100012002
221112200222222012002021120101000020
112110110002100100100010201112002022
101010220212000010121200110201102111
001222022111112121220221110111220021
020211201022022021121002002122122200
011110221001002112101000100200111101
211122220221221220001112102220200000
100222000120010012221002121121210202
101001121211002102000012101110011021
211002201112111110201012112021220221
111202021022210101010011101100220011
122022202102111110121021212111221100
212212012111102210201120002010100210
200201020220020210200212010000021120
211110202222111202202120200022012021
101102201201002122222011010210112112
001102211211211011120222221200012201
222212011111111200122012102000112221
221221022122210021100210200000220020
112020201221222100011222021221120211
021000110122201021122111021200101111
002022022102000200000112012222001002
110111211122011221101020020222210002
020121202202100021111002102012201012
100211011221001102121101122000101222
011100211212222001021012110110120120
000100022222022002020020010012021111
201001120012111200010012111200101021
012112101202211102222120222100100110
111111101220211010212020200110221220
122020111222001001120010101222111121
012020000010111122211020200210020200
020100122001021122001122122221200022
011102102210010121002210010011000100
120110022212210111102211010102020021
010212020101120100020212011201212012
211000210202222101202000200120002022
121001100112021101200020112022111220
001100120012002021200000021000000210
011010120022121200012000220102212102
201011022211122222200102010211022020
020202210202111212121212011012022010
201112022022022211122102121000011111
111220202011020122120012101021202001
112220020112012010102021101212020111
221221002012212121110001001222120100
000201002012022000022122112200012100
002120010001112111221000110201012210
202021002010111202210120021020110100
122000120010222010211202201200212211
012111101012210012200221200002011220
122022102202121002110200121002012202
121122022011200212221101202010002120
020102210101100121120211000101002202
101221010011000222001212012110100011
001122211120010022010110112220220220
212202110200002122000000112020202022
100202221100110200011020110020221220
001221211012012120112002001000211001
221220112100202120101000212211002200
121200121111001210122002121221010102
101201122000110210221022121002102010
012010012202002111001222200020211211
001202202000020211220212121222210222
021220211200212012010001002012011000
010222101000022210100012210212021000
012010001110200211010210101011022200
012011120021021221100020121210211211
011022200112211211020001122101002011
201221222010222120010112210100221022
102002021021012111011001221000002012
112211100001120101201000000011221110
200102121002221021121212012110211211
202021122200212120021221022021112201
202221210201112021021101110221121102
222002222210220212202212102201101202
101222021002220222212112020021011100
010112000101022022111001011222220000
111222001212220010202012101022212000
000211102101000012202010012121122222
221212000110110211122110000012102010
111000020012201202120010211121211120
020021122011110112001222112110020000
100021002201111011122200212121200010
202010102110202011201022101101022121
220200110221211001122021022110211112
021011212220011010022200212012110000
221010201002111111100022020212101211
112022100010100112102000102211122111
102121222000100111201200021012200010
210222210200121122222120101102020011
220101220010111201220020001211212100
210021122020111101112200100120211102
122022210020010121001020021211110020
102102210111002212210222210111022122
022010120222220012100201200100220002
011001100202212012120120112201100220
202021222012121111222022020001120121
211120102101221000100102212222121110
221220121221002102012100110010022221
020102020122112000202110020120021120
111200002012110120002112211112111222
102021100210121100200002200222020102
000011022010220200222000101201002010
011210201000221002121000002212222211
000011100200200202210022112002120100
022011002002111002010012220011200122
121210000020221221212011112201022121
200101001112011022201120202022020221
210200222112201222112101000110122001
220112120212002020100000120020022121
120101021102002021012022001112122021
110120102202111011020112200102221102
220212022100212211020021120122010020
201022200010010102010102010122200210
120200011202020002020200222011122012
212022220201122222011202010022111012
200112120200010122201112211020202211
121221200021102122010120211201010202
001000002111202122120010200020221221
021002121002202010002120211021102112
222021211112110221000011021121000011
211112222210210212121202001210002220
221101021200021202200212010101222212
220201220122122202220221112122222110
121220212021212212101002101012112012
210001110010020122000122011011011222
020221010020022220111202002200000200
122000011000122001221012222012221220
221200001002020120102111102001021010
120002000020202102011002210122200102
101201112002000011101002020012102022
200122021022221121111212010211202111
021211100020112022121220221111010120
101222121010021220121121200201002012
200011121011010021111111002210201020
022010000012021102011222222201200212
220001100102201011100012000222201011
122211202202222100020221210010001102
201012201212202111201102021120202212
102011120010102121021012102110001002
200222220220122202102122020022111101
222210020101220020121101212121202011
002102012020100200101022121001202120
011012220202221221100021212220100002
111212111012212220222020010210012200
121012202021112100201001221111212111
010121202022201211001120202211222110
121112121012012001022022120001020002
011111122110221011220100011221000112
202211210220000111100211121010021112
222111020100020102021122001001111022
212000210122120101201101220021222011
120120001202012112012102010000102212
220210010121100222210220102022000211
111022202112111100100002110200001010
110210010010010220001011110222101221
200011221102202002112012012112202110
220022002222101110020202122012221101
220222100010100100010221202101101012
002002210112201211121110021202121021
220210210122011121000120211102211012
021222120201202212020110021210000110
121221222202122200110210221120202122
211200022200021221221200112000100022
121221222002210121201120222011101100
022011022012210010211210101102222220
111002221200000110010002122022200021
200221212020002101100221201112000202
211112002001002200211112222122000101
200012011001011202101021020211100000
102111202200220211022100102021112101
002212100200120200122100022100110020
201120001110112000221102002222000120
102020110221211120200102220100222121
221102212211021122122222222202100202
022021101002210211022111210011120021
011211222221020212011210000210012021
012022020200020112101121200102012102
210000110012222020101110020221120210
102112101222201001101122220212121010
021120211220201121100202220111110100

7077

"""

"""
思路：bfs
离谱，递归深度太深给我杀掉了
使用sys.setrecursionlimit(10000)设置最大递归深度即可解决问题
按照我的理解最大递归深度应该是 300 * 300 = 90000   # 以后可以试试
"""
import sys
sys.setrecursionlimit(10000)


def get_i_j(mine_grid, i, j):
    try:
        return mine_grid[i][j]
    except Exception:
        return 0


def bfs(mine_grid, i, j):
    try:
        if not (0 <= i < len(mine_grid) and 0 <= j < len(mine_grid[0])):
            return 0
        if get_i_j(mine_grid, i, j) == 0:
            return 0
        this_val = get_i_j(mine_grid, i, j)
        mine_grid[i][j] = 0  # 标记为0，防止重复进入
        print(i, j)
        return this_val + \
               bfs(mine_grid, i - 1, j) + \
               bfs(mine_grid, i + 1, j) + \
               bfs(mine_grid, i, j - 1) + \
               bfs(mine_grid, i, j + 1)
    except Exception:
        return 0


def main():
    if not mine_grid:
        return 0
    if not mine_grid[0]:
        return 0
    res = 0  # 最大矿堆价值
    for i in range(len(mine_grid)):
        for j in range(len(mine_grid[0])):
            res = max(bfs(mine_grid, i, j), res)
    return res


mine_grid = []
for line in sys.stdin:
    tmp_grid = []
    tmp_str = line.strip()
    if "-" in tmp_str:
        break
    for s in tmp_str:
        s = int(s)
        tmp_grid.append(s)
    if tmp_grid:
        mine_grid.append(tmp_grid)

# mine_grid = [
#     [1, 0, 1],
#     [1, 1, 0],
#     [0, 1, 1]
# ]  # 示例输入，你可以根据需要修改

print(main())
