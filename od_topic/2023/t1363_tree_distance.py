"""
题目描述
按照环保公司要求，小明需要在沙化严重的地区进行植树防沙工作，初步目标是种植一条直线的树带。由于有些区域目前不适合种植树木，所以只能在一些可以种植的点来种植树木。

在树苗有限的情况下，要达到最佳效果，就要尽量散开种植，不同树苗之间的最小间距要尽量大。给你一个适合种情树木的点坐标和一个树苗的数量，请帮小明选择一个最佳的最小种植间距。

例如，适合种植树木的位置分别为1,3,5,6,7,10,13 树苗数量是3，种植位置在1,7,13，树苗之间的间距都是6，均匀分开，就达到了散开种植的目的，最佳的最小种植间距是6。

输入描述
第1行表示适合种树的坐标数量。

第2行是适合种树的坐标位置。

第3行是树苗的数量。

例如:

7
1 5 3 6 10 7 13
3
输出描述
最佳的最小种植间距。

备注
位置范围为
1~10000000

种植树苗的数量范围
2~10000000

用例确保种植的树苗不会超过有效种植坐标数量

样例
输入

7
1 5 3 6 10 7 13
3
输出

6
说明
3棵树苗分别种植在
1，7，13位置时，树苗种植的最均匀，最小间距为
6
"""

"""
二分，枚举，失败
题目需要给出符合条件的最大间距
思路：首先排序位置
从开始位置往左右两边查找，是否有满足条件的pos，有的话，种植，植树数目+1，默认植树=1
二分法
左右间距小于，当前间距   则 间距左移，缩小
左右间距大于 当前间距    则 记录当前结果，右移看看还有没有更大的符合要求的间距

1. 看清题目看清题目看清题目
"""


def main():
    pos_num = int(input())  # 适合种树的坐标数量
    pos_list = list(map(int, input().split()))
    tree_num = int(input())

    pos_list.sort()
    max_gap = 0     # 最大间距

    left = 1
    right = pos_list[-1] - pos_list[0]
    while left <= right:
        mid_gap = (left + right) // 2
        plant_tree = 1  # 默认植树数目为1
        # 查找右边符合条件pos数
        right_pre_start = 0   # 右边上一个种植下标
        for idx in range(len(pos_list)):
            if pos_list[idx] - pos_list[right_pre_start] >= mid_gap:    # 符合条件，种植
                right_pre_start = idx
                plant_tree += 1

        if plant_tree >= tree_num:      # 符合条件，记录结果，增大间距
            max_gap = max(mid_gap, max_gap)
            left = mid_gap + 1
        else:
            right = mid_gap - 1
    return max_gap


print(main())
