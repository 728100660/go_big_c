"""
写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：

假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。
     因此返回 INT_MIN (−231) 。


思路：
1.引入一个状态的概念，它决定了什么时候能添加什么样子的字符串，剩下的就是完善if else就行了
"""
if __name__ == '__main__':
    def str_to_int(str):
        res_sign = 1
        res_int = 0
        stage = 0       # 0代表没有有效字符，1代表  有+,-号 但是没有数字，2代表 有+,-号 有数字，但是没有小数点，3代表 有+,-号 有数字 有小数点
        for s in str:
            if s == " " or s == "\n" or s == "\t":  # 空字符串省略
                if stage != 0:      # 此时无效字符串
                    break
                continue
            elif ord("0") <= ord(s) <= ord("9"):      # 数字无条件加入
                num = int(s)
                res_int = res_int * 10 + num
                if stage == 0 or stage == 1:
                    stage = 2
            elif s == "-" or s == "+":  # -号加入
                if stage != 0:      # 此时无效字符串
                    break
                res_sign = -1 if s == "-" else 1
                stage = 1
            elif s == ".":
                if stage != 2:        # 此时无效字符串
                    break
                break       # 小数点不做处理
            else:
                break
        res_int = res_sign * res_int
        # 是否超出范围
        if res_int < -2**31:
            return -2**31
        if  res_int > 2**31 - 1:
            return 2**31 - 1
        return res_int


    assert 3 == str_to_int("3.14159")
    assert 0 == str_to_int("   +0 123")